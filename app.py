from flask import Flask, render_template, request, jsonify, send_file
from scraper import HockeyScraper
from analyzer import HockeyAnalyzer
from visualizer import HockeyVisualizer
import os
import subprocess

class HockeyApp:
    def __init__(self):
        self.app = Flask(__name__)
        self.scraper = HockeyScraper()
        self.setup_routes()

        # üîπ Appel du script de scraping
        self.run_scraper()

    def run_scraper(self):
        """Ex√©cute scrape_all_pages.py"""
        print("üì° Lancement du script de scraping...")
        subprocess.run(["python", "scrape_all_teams.py"], check=True)

    def setup_routes(self):
        @self.app.route('/')
        def home():
            return render_template('index.html')

        @self.app.route('/search', methods=['POST'])
        def search():
            team_name = request.form.get('team_name')

            # üì° Scraping automatique des donn√©es
            data = self.scraper.get_team_data(team_name)
            if not data:
                return jsonify({"error": "Aucune donn√©e trouv√©e pour cette √©quipe."}), 404

            # üìÇ V√©rification du fichier CSV existant
            csv_file = f"static/hockey_stats_{team_name.replace(' ', '_').lower()}.csv"
            if not os.path.exists(csv_file):
                return jsonify({"error": "Le fichier de donn√©es n'a pas √©t√© g√©n√©r√©."}), 500

            # üìä Analyse des donn√©es
            analyzer = HockeyAnalyzer(team_name)
            if analyzer.df is None:
                return jsonify({"error": "Donn√©es analysables non disponibles."}), 500

            stats = analyzer.show_basic_stats().to_dict()
            best_year = analyzer.get_best_year().to_dict()
            correlation = analyzer.calculate_correlation()
            trend = analyzer.team_performance_trend().to_dict(orient="records")
            best_teams = analyzer.best_teams_over_years().to_dict()
            comparison = analyzer.compare_all_teams_performance()

            # üé® G√©n√©ration des graphiques
            visualizer = HockeyVisualizer(team_name)
            wins_plot = visualizer.plot_team_wins_over_years()  # ‚úÖ Sauvegarde
            goals_plot = visualizer.plot_goals_histogram()      # ‚úÖ Sauvegarde

            # Nouveau graphique 1 : Boxplot des victoires par √©quipe
            wins_boxplot = visualizer.plot_wins_boxplot()

            # Nouveau graphique 2 : Heatmap des performances moyennes par ann√©e
            heatmap_plot = visualizer.plot_performance_heatmap()

            # Nouveau graphique 3 : Scatter plot entre buts marqu√©s et pourcentage de victoires
            scatter_plot = visualizer.plot_goals_vs_wins_scatter()  # üõ†Ô∏è M√©thode corrig√©e

            # Nouveau graphique 4 : Graphe plot de perfomance
            performance_plot = visualizer.plot_performance_distribution()  # üõ†Ô∏è M√©thode corrig√©e


            return jsonify({
                "message": f"Donn√©es r√©cup√©r√©es et analys√©es pour {team_name}",
                "data": data,
                "statistiques": stats,
                "meilleure_ann√©e": best_year,
                "corr√©lation": correlation,
                "√©volution_performance": trend,
                "meilleures_equipes": best_teams,
                "comparaison_√©quipes": comparison,
                "csv_file": csv_file,
                "graphs": {
                    "wins_plot": wins_plot,
                    "goals_plot": goals_plot,
                    "wins_boxplot": wins_boxplot,
                    "heatmap_plot": heatmap_plot,
                    "scatter_plot": scatter_plot,
                    "performance_plot": performance_plot
                }
            })

        @self.app.route('/graphs/<filename>')
        def get_graph(filename):
            """Route pour acc√©der aux graphiques sauvegard√©s."""
            graph_path = os.path.join('static', 'graphs', filename)
            if os.path.exists(graph_path):
                return send_file(graph_path)
            else:
                return jsonify({"error": "Graphique non trouv√©."}), 404

    def run(self):
        """Lance l'application Flask."""
        self.app.run(debug=True)

if __name__ == '__main__':
    HockeyApp().run()
